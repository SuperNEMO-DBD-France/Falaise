============================================================
Tag registration service for configuration files and more
============================================================



The configuration tag system in Falaise
=======================================

The blessed configurations for  software components used for SuperNEMO
data processing is  addressed through a *configuration  tag* system. A
*tag*  is an  unique identifier  which allows  to describe  a specific
configuration of a given  subsystem (geometry model, simulation setup,
reconstruction pipeline...)  and to locate (*resolve*) the path of its
associated  resource configuration  file  distributed  by the  Falaise
library.

The tag is implemented as a character string using the URN format:

Examples:

.. code::

   urn:snemo:demonstrator:geometry:4.0
   urn:snemo:demonstrator:simulation:2.1
..

The leading ``urn`` prefix is  mandatory.  Then comes a mandatory URN
*namespace*, i.e. ``snemo:demonstrator``.  The last part  of the URN tag is
arbitrary and  can be considered  as the  identifier of the  item with
respect  to the  namespace. This  identifier typically  consists in  a
sequence of some  alphabetical tokens, separated by colons (``:``)
and  typically followed by  a numerical or version  identifier (``42``,
``3.14``)  and possibly  more specialized tokens.

Examples:

.. code::

   urn:snemo:demonstrator:data:real:run:3252
   urn:snemo:demonstrator:data:real:run:3253
   urn:snemo:demonstrator:data:real:run:3254
   urn:snemo:demonstrator:trigger:42
   urn:snemo:demonstrator:trigger:42-bis
   urn:snemo:demonstrator:trigger:42-ter
   urn:snemo:demonstrator:trigger:43
..


A configuration  item may  be a standalone  resource or  concept which
depends on no external resource and  is simply associated to an unique
configuration    file,    typically   using    the    Bayeux/datatools
(multi-)properties format.   However, some configuration  systems used
to   setup    complex   data   processing    components   (simulation,
reconstruction),   are  built   from   the   aggregation  of   several
configuration  subsystems.  The  configuration  tag  system allows  to
describe the *dependency/composition* relationships between such items.

For example, a  *simulation setup* (for the ``flsimulate`` application)
is built from an  *experimental  setup*,  a  *vertex  generation  setup*,
a  *decay generation  setup* and  a  *Geant4 session  setup*.
The  *experimental
setup*  itself  is built  on  top  of  a  *geometry model  setup*  and
eventually  a *device  setup* (which  may describe/model  the hardware
devices,   including   electronics,   cabling...).  This   implies   a
*dependency  graph*   that  must  be  traversed   properly  to  pickup
unambiguously  the  configuration  of  a  given  data  processing  and
associate it  to the  output data  (real data  collection, simulation,
reconstruction...).  More, a  configuration setup can be  reused, or at
least part  of it, by  sequenced data processing  algorithms.

Example:
Monte  Carlo  data  are  generated by  ``flsimulate``  using  a  given
configuration of the simulation setup.  When running ``flreconstruct``
to  process Monte  Carlo data,  one  must be  sure to  reuse the  same
configuration  of the  experimental  setup implied  by the  simulation
setup, typically using the same geometry model and its associated options
(*variants* parameters).


Dependencies between tags
=========================

Example of some dependency relationship between tags. The arrow points
from the depender to the dependee:

.. code::

   [urn3]
      | "depender"
      |
 "dependency"
      |
      v "dependee"
   [urn2]
      |\ "depender"
      | \
  "dependency"
      |   \
      v    v "dependees"
   [urn0] [urn1]
..


Categories of URN tags
======================

There  are  different  categories  of  configuration  items  that  are
supported in Falaise published tags:

  * ``experiment`` : Identifier/tag associated to a specific *experiment*,
  * ``configuration`` : Identifier/tag associated to the configuration of a generic system.
  * ``geometry`` : Identifier/tag associated to the configuration of a geometry model.
  * ``devices`` : Identifier/tag associated to the configuration of a device model.
  * ``expsetup`` : Identifier/tag associated to an *experimental setup*,
  * ``simsetup`` : Identifier/tag associated to a *simulation setup*,
  * ``recsetup`` : Identifier/tag associated to a *reconstruction setup*,
  * ``anasetup`` : Identifier/tag associated to an *analysis setup*,
  * ``varregistry`` : Identifier/tag associated to a specific *variant registry*,
  * ``variants`` : Identifier/tag associated to a *variant service setup*,
  * ``varprofile`` : Identifier/tag associated to a specific *variant profile*,
  * ``services`` :  Identifier/tag associated to a *service management setup*,


``experiment``
--------------

The ``experiment`` category is used for a tag associated to a specific
experiment. Example: the BiPo3 detector,  the SuperNEMO  demonstrator, the Atlas detector :-) !

A  tag of  the ``experiment`` category  is used  to specify the  general experimental
context within which  software activities are done. It  is an abstract
item associated to no real resources like a configuration file. However, such a tag could
be associated to a web page describing the project.


Example: four different tags used to address four different experiments.

.. code::

  [urn:snemo:demonstrator]  [urn:bipo3:detector]  [urn:atlas]  [urn:lhcb]
..


``configuration``
-----------------

The ``configuration`` category is used for a tag associated to a generic configuration resource.

``geometry``
------------

The ``geometry``  category is  used for a  tag associated  to the
configuration  of  some geometry  model.

Example: three  distinct ``geometry`` tags of  the geometry setup
are associated to different ``experiment`` tags:

.. code::

   [urn:snemo:demonstrator:geometry:4.0]  [urn:snemo:demonstrator:geometry:5.0]  [urn:bipo3:geometry:1.0]
      |                                       |                                       |
      +---------------------------------------+                                       |
      |                                                                               |
      v                                                                               v
   [urn:snemo:demonstrator]                                                       [urn:bipo3]
..

Additional geometry  configurations can  be added  in parallel  to the
existing  ones.  The  directed  lines between  the  tags  represent  a
dependency relationship  from the *depender* to  the *dependee*.  Here
both  geometry  setup  configurations  on  the  left  depends  on  the
SuperNEMO demonstrator  experiment, while  there is only  one geometry
setup configuration  on the right  depending on the  BiPo3 experiment.
This   graph  expresses   that  it   makes   no  sense   to  use   the
``urn:bipo3:geometry:1.0``  geometry  model  in  the  context  of  the
SuperNEMO demonstrator experiment.


``devices``
------------

The ``devices``  category is  used for a  tag associated  to the
configuration  of  some device  model.


``expsetup``
------------

Identifier/tag associated to an *experimental setup* which implies:

  * the setup of the geometry manager
  * the setup of the device manager (not implemented yet)

Example:
An *experimental setup* is built from a set of two components: the *geometry* model
of the detector, the *device* model of the experiment (typically with a description
of the electronics and the connected devices composing the readout, control and
monitoring system):

.. code::

   [urn:snemo:demonstrator:setup:2.0]
      |
      +---------------------------------------+
      |                                       |
      v                                       v
   [urn:snemo:demonstrator:geometry:4.0]  [urn:snemo:demonstrator:device:1.0]
      |                                       |
      +---------------------------------------+
      |
      v
   [urn:snemo:demonstrator]
..

A new *experimental setup* can be published using the same geometry model but a refined
*device model*. In such case, the new *experimental setup* must be associated with a new
tag using a bumped version number:

.. code::

   [urn:snemo:demonstrator:setup:3.0]
      |
      +---------------------------------------+
      |                                       |
      v                                       v
   [urn:snemo:demonstrator:geometry:4.0]  [urn:snemo:demonstrator:device:2.0]
      |                                       |
      +---------------------------------------+
      |
      v
   [urn:snemo:demonstrator]
..

   Or course, both geometry and device models could be modified to build a new experimental setup
   which must be explicitely described as depending of the new combination of subsystems:


.. code::

   [urn:snemo:demonstrator:setup:4.0]
      |
      +---------------------------------------+
      |                                       |
      v                                       v
   [urn:snemo:demonstrator:geometry:5.0]  [urn:snemo:demonstrator:device:2.0]
      |                                       |
      +---------------------------------------+
      |
      v
   [urn:snemo:demonstrator]
..

``simsetup``
------------

Identifier/tag associated to a *simulation setup* which implies:

  * an *experimental setup*,
  * the setup of the *vertex* generation manager,
  * the setup of the *primary* event generation manager,
  * the setup of the *Geant4* simulation manager which finally uses the three setups above.

Example: The following simulation setup is built by the aggregation of several subsystems
with their own configurations:

.. code::

   [urn:snemo:demonstrator:simulation:2.1]
      |
      +------------------------------------+--------------------------------------------------+
      |                                    |                                                  |
      v                                    v                                                  v
   [urn:snemo:demonstrator:setup:1.0]  [urn:snemo:demonstrator:simulation:vertexes:4.1]  [urn:snemo:demonstrator:simulation:decays:1.2]
      |                                    |
      +------------------------------------+
      |
      v
   [urn:snemo:demonstrator:geometry:4.0]
      |
      |
      |
      v
   [urn:snemo:demonstrator]
..

Suppose  we  decide  to  enrich   the  vertex  generation  setup  with
additional    vertex    generators     not    implemented    in    the
``urn:snemo:demonstrator:simulation:vertexes:4.1``  configuration.  We
can  create  a new  ``urn:snemo:demonstrator:simulation:vertexes:4.2``
configuration setup.  As the  simulation setup  depends on  the vertex
generation   setup,  it   is   necessary  to   also   publish  a   new
``urn:snemo:demonstrator:simulation:3.0`` simulation setup.  This will
preserve the  existing one (backward compatibility)  and make possible
to use the new one independently. The dependency scheme is:

.. code::

   [urn:snemo:demonstrator:simulation:3.0]
      |
      +------------------------------------+--------------------------------------------------+
      |                                    |                                                  |
      v                                    v                                                  v
   [urn:snemo:demonstrator:setup:1.0]  [urn:snemo:demonstrator:simulation:vertexes:4.2]  [urn:snemo:demonstrator:simulation:decays:1.2]
      |                                    |
      +------------------------------------+
      |
      v
   [urn:snemo:demonstrator:geometry:4.0]
      |
      |
      |
      v
   [urn:snemo:demonstrator]
..


``recsetup``
------------

Identifier/tag associated to a *reconstruction setup* which implies:

  * an *experimental setup* (see above)
  * the setup of the reconstruction chain (*pipeline*)

Example: The following reconstruction setup is built by the aggregation of an experimental setup configuration
and a specific data processing pipeline (sequence of processing modules):

.. code::

   [urn:snemo:demonstrator:reconstruction:1.0.0]
      |
      +------------------------------------+
      |                                    |
      v                                    v
   [urn:snemo:demonstrator:setup:1.0]  [urn:snemo:demonstrator:reconstruction:1.0.0:pipeline]
      |
      |
      |
      v
   [urn:snemo:demonstrator:geometry:4.0]
      |
      |
      |
      v
   [urn:snemo:demonstrator]
..

``anasetup``
------------

Identifier/tag associated to an *analysis setup* which implies:

  * an *experimental setup* (see above)
  * an *analysis setup* (not used yet)


``varregistry``
---------------

Identifier/tag associated to the definition of a *variant registry*.


``variants``
-----------

Identifier/tag associated to the configuration of a *variant service*.
A variant service is built from a *variant repository* which aggregates,
and thus depends on, variant registries.

``varprofile``
--------------

Identifier/tag associated to a *variant profile*. A variant profile depends
on a given *variant service*.


``services``
------------

Identifier/tag associated to the configuration of a *service management system*.


Configuration of the simulation
=============================================

As mentionned  above, ``flsimulate`` needs two  configuration items in
order  to   describe  unambiguously  the  configuration   of  a  given
simulation session/run.

Static configuration
--------------------

The first item consists in the *static* part of the configuration.  It
is  provided   through  the  *simulation  setup*   tag.   This  static
configuration is published  by the Physics Board as  an official setup
which defines  the general context  of a Monte Carlo  production. This
part  of  the configuration  is  thus  hardcoded  in Falaise  and  may
correspond to a large and complex set of non mutable configuration and
data files  (normal users should  never change them).  As  an official
item  distributed  within Falaise,  a  tag  is  associated to  it  and
registered in  Falaise's URN database  service.  Users are  invited to
provide  the   tag  which   will  be   automatically  resolved   as  a
configuration file for the simulation manager.

Dynamic configuration
----------------------

On the  other hand,  Falaise offers  the possibility  to its  users to
modify  a (generally)  limited set  of parameters  available from  the
static part of the configuration:  the *variant* parameters.  The list
of  *variant*  parameters with  their  associated  values defines  the
*dynamic* part of the configuration.  It is called a *variant profile*
and generally  consists in a simple  human readable file or  a list of
named *value settings*.

The static configuration item generally depends on a specific *variant
service*  which defines  the rules  used to  manage a  set of  variant
parameters.   The  user  can  thus create  its  own  variant  profile,
following the rules published by the variant service associated to the
selected simulation setup.   The variant profile generated  by the user
is  thus  injected  in  the  variant  system  on  top  of  the  static
configuration. This  mechanism may be  used to choose the  tickness of
the  source  foil,  the  random vertex  generator,  the  random  decay
generator...

If a specific variant profile is  acknowledged by the Physics Board as
a blessed/official profile,  it is associated to a  tag and registered
in  the  URN  database  service.   Several  variant  profiles  can  be
officially registered, leading to as  many official tags.  The user is
thus invited to  provide the tag number of the  variant profile he/she
has  selected  from  the  official   list  associated  to  the  chosen
simulation  setup.  In  such a  case,  a simulation  session is  fully
described by  both the  *static* configuration  tag and  the *dynamic*
configuration tag.


Organization of configuration resource files
=============================================

WIP
