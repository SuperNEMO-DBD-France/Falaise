===================================
Registered tags
===================================



The configuration tag system in Falaise
=======================================

The blessed  configurations of software components  used for SuperNEMO
data processing is  addressed through a *configuration  tag* system. A
*tag*  is   an  unique  identifier   which  allows  to   describe  the
configuration of a given  subsystem (geometry model, simulation setup,
reconstruction pipeline...)  and to locate (*resolve*) the path of its
associated  resource configuration  file  distributed  by the  Falaise
library.

The tag is implemented as a character string using the URN format:

Examples:

.. code::

   urn:snemo:demonstrator:geometry:4.0
   urn:snemo:demonstrator:simulation:2.1
..

A configuration item may be a  standalone resource which depends on no
external resource and  is associated to an  unique configuration file,
typically  using   the  Bayeux/datatools   (multi-)properties  format.
However,  some  configuration  systems  used  to  setup  complex  data
processing components (simulation, reconstruction), are built from the
aggregation  of several  configuration subsystems.   The configuration
tag system  allows to describe the  *dependency* relationships between
such items.

For example, a  *simulation setup* (for ``flsimulate``)  is built from
an  *experimental  setup*,  a  *vertex  generation  setup*,  a  *decay
generation  setup* and  a  *Geant4 session  setup*. The  *experimental
setup*  itself  is built  on  top  of  a  *geometry model  setup*  and
eventually  a *device  setup* (which  may describe/model  the hardware
devices,   including   electronics,   cabling...).  This   implies   a
*dependency  graph*   that  must  be  traversed   properly  to  pickup
unambiguously  the  configuration  of  a  given  data  processing  and
associate it  to the  output data  (real data  collection, simulation,
reconstruction...).  More a  configuration setup can be  reused, or at
least part  of it, by  sequenced data processing  algorithms.

Example:
Monte  Carlo  data  are  generated by  ``flsimulate``  using  a  given
configuration of the simulation setup.  When running ``flreconstruct``
to  process Monte  Carlo data,  one  must be  sure to  reuse the  same
configuration  of the  experimental  setup implied  by the  simulation
setup, typically using the same geometry model and associated options.


Dependencies between tags
=========================






Categories of URN tags
======================

There are different categories of configuration items that are supported in Falaise published tags:

  * ``experiment`` : Identifier/tag associated to a specific *experiment*,
  * ``configuration`` : Identifier/tag associated to the configuration of a generic system (geometry...).
  * ``expsetup`` : Identifier/tag associated to an *experimental setup*,
  * ``simsetup`` : Identifier/tag associated to a *simulation setup*,
  * ``recsetup`` : Identifier/tag associated to a *reconstruction setup*,
  * ``anasetup`` : Identifier/tag associated to an *analysis setup*,
  * ``variant`` : Identifier/tag associated to a *variant service setup*,
  * ``varprofile`` : Identifier/tag associated to a specific *variant profile*,
  * ``service`` :  Identifier/tag associated to a *service management setup*,


Experiment
----------

The ``experiment`` category is used for a tag associated to a specific
experiment  (example: BiPo3,  SuperNEMO  demonstrator). A  tag of  the
``experiment`` category  is used  to specify the  general experimental
context within which  software activities are done. It  is an abstract
item associated to no resources.


Example: four different tags used to address four experiment.

.. code::

  [urn::snemo:demonstrator]  [urn:bipo3]  [urn:atlas]  [urn:lhcb]
  ..

Configuration
-------------

The ``configuration`` category is used for a tag associated to the
configuration of some generic system or service (geometry model,
device model, set of reconstruction modules, pipeline...)

Example: three distinct ``configuration`` tags of the geometry setup are associated
to the different ``experiment`` tags:

.. code::

   [urn::snemo:demonstrator:geometry:4.0]  [urn::snemo:demonstrator:geometry:5.0]  [urn:bipo3:geometry:1.0]
      |                                       |                                       |
      +---------------------------------------+                                       |
      |                                                                               |
      v                                                                               v
   [urn::snemo:demonstrator]                                                       [urn:bipo3]
..

Additional geometry  configurations can  be added  in parallel  to the
existing  ones.  The  directed  lines between  the  tags  represent  a
dependency relationship  from the *depender* to  the *dependee*.  Here
both  geometry  setup  configurations  on  the  left  depends  on  the
SuperNEMO demonstrator  experiment, while  there is only  one geometry
setup configuration  on the right  depending on the  BiPo3 experiment.
This   graph  expresses   that  it   makes   no  sense   to  use   the
``urn:bipo3:geometry:1.0``  geometry  model  in  the  context  of  the
SuperNEMO demonstrator experiment.


* ``expsetup`` : Identifier/tag associated to an *experimental setup* which implies:

    * the setup of the geometry manager
    * the setup of the device manager (not implemented yet)

  Example:
  An *experimental setup* is built from a set of two components: the geometry model
  of the detector, the device model of the experiment (typically with a description
  of the electronics):

.. code::

   [urn::snemo:demonstrator:setup:2.0]
      |
      +---------------------------------------+
      |                                       |
      v                                       v
   [urn::snemo:demonstrator:geometry:4.0]  [urn::snemo:demonstrator:device:1.0]
      |                                       |
      +---------------------------------------+
      |
      v
   [urn::snemo:demonstrator]
..

   A new *experimental setup* can be published using the same geometry model but a refined
   *device model*:

.. code::

   [urn::snemo:demonstrator:setup:3.0]
      |
      +---------------------------------------+
      |                                       |
      v                                       v
   [urn::snemo:demonstrator:geometry:4.0]  [urn::snemo:demonstrator:device:2.0]
      |                                       |
      +---------------------------------------+
      |
      v
   [urn::snemo:demonstrator]
..

   Or course, both geometry and device models could be modified to build a new experimental setup
   which must be explicitely described as depending of the new combination of subsystems:


.. code::

   [urn::snemo:demonstrator:setup:4.0]
      |
      +---------------------------------------+
      |                                       |
      v                                       v
   [urn::snemo:demonstrator:geometry:5.0]  [urn::snemo:demonstrator:device:2.0]
      |                                       |
      +---------------------------------------+
      |
      v
   [urn::snemo:demonstrator]
..

* ``simsetup`` : Identifier/tag associated to a *simulation setup* which implies:

  * an *experimental setup*
  * the setup of the vertex generation manager
  * the setup of the primary event generation manager
  * the setup of the Geant4 simulation manager

  Example: The following simulation setup is built by the aggregation of several subsystems with their own configurations:

.. code::

   [urn::snemo:demonstrator:simulation:2.1]
      |
      +------------------------------------+--------------------------------------------------+
      |                                    |                                                  |
      v                                    v                                                  v
   [urn::snemo:demonstrator:setup:1.0]  [urn::snemo:demonstrator:simulation:vertexes:4.1]  [urn::snemo:demonstrator:simulation:decays:1.2]
      |                                    |
      +------------------------------------+
      |
      v
   [urn::snemo:demonstrator:geometry:4.0]
      |
      |
      |
      v
   [urn::snemo:demonstrator]
..

   Suppose we decide to enrich the vertex generation setup with additional vertex generators not implemented in the
   ``urn::snemo:demonstrator:simulation:vertexes:4.1`` configuration. We can create a new ``urn::snemo:demonstrator:simulation:vertexes:4.2``
   configuration setup. As the simulation setup depends on the vertex generation setup, it is necessary to publish a new
   ``urn::snemo:demonstrator:simulation:3.0`` simulation setup. This will preserve the existing one (backward compatibility)
   and make possible to use the new one independently of which the dependency scheme is:

.. code::

   [urn::snemo:demonstrator:simulation:3.0]
      |
      +------------------------------------+--------------------------------------------------+
      |                                    |                                                  |
      v                                    v                                                  v
   [urn::snemo:demonstrator:setup:1.0]  [urn::snemo:demonstrator:simulation:vertexes:4.2]  [urn::snemo:demonstrator:simulation:decays:1.2]
      |                                    |
      +------------------------------------+
      |
      v
   [urn::snemo:demonstrator:geometry:4.0]
      |
      |
      |
      v
   [urn::snemo:demonstrator]
..


* ``recsetup`` : Identifier/tag associated to a *reconstruction setup* which implies:

  * an *experimental setup* (see above)
  * the setup of the reconstruction chain (*pipeline*)

  Example: The following reconstruction setup is built by the aggregation of a experimental setup configuration
  and a specific data processing pipeline (sequence of processing modules):

.. code::

   [urn::snemo:demonstrator:reconstruction:1.0.0]
      |
      +------------------------------------+
      |                                    |
      v                                    v
   [urn::snemo:demonstrator:setup:1.0]  [urn:snemo:demonstrator:reconstruction:1.0.0:pipeline]
      |
      |
      |
      v
   [urn::snemo:demonstrator:geometry:4.0]
      |
      |
      |
      v
   [urn::snemo:demonstrator]
..

* ``anasetup`` : Identifier/tag associated to an *analysis setup* (not used yet) which implies:

  * an *experimental setup* with:
  * an *reconstruction setup* with:

* ``variant`` : Identifier/tag associated to the configuration of a variant service
* ``varprofile`` : Identifier/tag associated to a variant profile. Variant profile depends
  on a given variant service
* ``service`` : Identifier/tag associated to the configuration of a *services management system*

Organization of  configuration resource files
=============================================

SuperNEMO experimental setup
----------------------------



SuperNEMO Simulation
--------------------



SuperNEMO Reconstruction
------------------------




SuperNEMO Analysis
------------------
